plugins {
    id 'de.solugo.gradle.nodejs' version '0.6.0'
    id 'kotlin-multiplatform' version '1.3.10'
}
repositories {
    mavenCentral()
}

kotlin {
    targets {
        fromPreset(presets.jvm, 'jvm')
        fromPreset(presets.js, 'js')
    }
    sourceSets {
        commonMain {
            kotlin.srcDir('src/commonMain')
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
            }
        }
        commonTest {
            kotlin.srcDir('src/commonTest')
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
        jvmMain {
            kotlin.srcDir('src/jvmMain')
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
            }
        }
        jvmTest {
            kotlin.srcDir('src/jvmTest')
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
            }
        }
        jsMain {
            kotlin.srcDir('src/jsMain')
            resources.srcDir('res/jsMain')
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-js'
            }
        }
        jsTest {
            kotlin.srcDir('src/jsTest')
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-js'
            }
        }
    }
}


task fatJar(type: Jar) {
    dependsOn jvmMainClasses

    manifest {
        attributes 'Main-Class': 'com.github.werehuman.tetris.TetrisMainKt'
    }
    baseName = 'all-in-one-jar'

    from {
        (configurations.commonMainImplementation.files
                + configurations.jvmMainImplementation.files
                + compileKotlinJvm.outputs.files
                + jvmMainClasses.outputs.files)
                .collect { it.isDirectory() ? it : zipTree(it) }
    }
}


task jsMinifiedDir {
    ext.path = "${buildDir}/minified"
    outputs.dir(ext.path)
    doLast {
        mkdir(ext.path)
    }
}

Closure makeJsTerserTask(String outFileName, Closure getSrcs) {
    return {
        def inputFiles = getSrcs()
        if (inputFiles.size() == 0) {
            throw new IllegalStateException("No input files")
        }

        def outFile = "${jsMinifiedDir.ext.path}/${outFileName}.js"
        outputs.file(outFile)

        require = ['terser']
        executable = 'npx'
        args = ['terser', '--output', outFile]
        args += inputFiles
    }
}

tasks.create(name: 'jsMinifiedStdlib', type: NodeJsTask, dependsOn: [jsMinifiedDir], makeJsTerserTask('stdlib') {
    configurations.jsMainImplementation.collect() {
        zipTree(it.absolutePath)
                .grep { it.path.endsWith(".js") }
                .collect { it.absolutePath }
    }.flatten()
})
tasks.create(name: 'jsMinifiedApp', type: NodeJsTask, dependsOn: [jsMinifiedDir, jsMainClasses], makeJsTerserTask('app') {
    Collections.singletonList(compileKotlinJs.outputFile)
})

task indexHtml {
    dependsOn jsMinifiedStdlib, jsMinifiedApp

    def destinationFile = "${buildDir}/index.html"
    outputs.file(destinationFile)

    def cat = { File src, Writer dst ->
        def reader = src.absoluteFile.newReader()
        try {
            reader.lines().each {
                dst.write(it)
            }
        } finally {
            reader.close()
        }
    }

    doLast {
        file(destinationFile).withWriter { Writer dst ->
            dst.write('<!DOCTYPE html>')
            dst.write('<html><head>')
            dst.write('<meta charset="UTF-8" />')
            dst.write('<title>Kotlin Tetris</title>')
            dst.write('</head><body><script type="text/javascript">')
            jsMinifiedStdlib.outputs.each { it.files.each { cat it, dst } }
            jsMinifiedApp.outputs.each { it.files.each { cat it, dst } }
            dst.write('</script></body></html>')
        }

        println "file://${destinationFile}"
    }
}